/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }
}
*/
import java.util.*;
/*
 * similar to preOrder
 * visit node -> judge the sum ?= target
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> findPath(TreeNode root,int target) {
    	ArrayList<ArrayList<Integer>> allPaths = new ArrayList<>();
    	ArrayList<Integer> onePath = new ArrayList<>();
    	int currentSum = 0;
    	/*now use non-recursive method to preOrder binary tree*/
    	TreeNode p = root;
    	Stack<TreeNode> stack = new Stack<>();
    	while(p != null || !stack.empty()){
    		while(p != null){
    			/*visit*/
    			currentSum = currentSum+p.val;
    			onePath.add(p.val);
    			stack.add(p);
    			p = p.left;
    		}
    		
    	}
    }
}
