/*
 * with partition in quick sort or
 * with an set to store current least numbers
 */
import java.util.*;
public class Solution {
	public ArrayList<Integer> getLeastKNumbersWithPartition(int[] array, int k){
		ArrayList<Integer> result = new ArrayList<>();
		if(array.length==0 || k<=0 || k>array.length) return result;
		
		int start = 0;
		int end = array.length-1;
		int index
	}
	private int partition(int[] array, int start, int end){
		if(array.length==0) return -1;
		int pivot = array[end];/*end element as pivot*/
		int iLargerPivot = start;
		for(int i=start; i<=end; i++){
			if(array[i] < pivot){
				if(i != iLargerPivot) swap(array, i, iLargerPivot);
				iLargerPivot++;
			}
		}
		swap(array, iLargerPivot, end);
		return iLargerPivot;
	}
	private void swap(int[] array, int i, int j){
		/*exchange the element in i and j*/
		int tmp = array[i];
		array[i] = array[j];
		array[j] = tmp;
	}
}
