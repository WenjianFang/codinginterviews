/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }
}
*/
import java.util.*;
/*
 * similar to preOrder
 * visit node -> judge the sum ?= target
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> findPath(TreeNode root,int target) {
    	ArrayList<ArrayList<Integer>> allPaths = new ArrayList<>();
    	findPathRecu(root, target, allPaths, null);
    	return allPaths;
    }
    private void findPathRecu(TreeNode root, int target, 
    		ArrayList<ArrayList<Integer>> allPaths, ArrayList<Integer> parentPath){
    	ArrayList<Integer> onePath = new ArrayList<>();
    	if(parentPath != null) onePath.addAll(parentPath);
    	onePath.add(root.val);
    	if((root.left==null) && (root.right==null) && (root.val == target)){
    		allPaths.add(onePath);
    		return;
    	}
    	if(root.val > target) {
    		return;
    	}
    	if(root.left != null){
    		findPathRecu(root.left, target-root.val, allPaths, onePath);
    	}
    	if(root.right != null){
    		findPathRecu(root.right, target-root.val, allPaths, onePath);
    	}
    	return;
    	
    }
}
