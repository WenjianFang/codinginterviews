/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
import java.util.*;
/*
 * similar to preOrder
 * visit node -> judge the sum ?= target
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> findPath(TreeNode root,int target) {
        
    	ArrayList<ArrayList<Integer>> allPaths = new ArrayList<>();
        ArrayList<Integer> onePath = new ArrayList<>();
        
        if(root==null) return allPaths;
        int currentSum = 0;
        
        findPathRecu(allPaths, onePath, root, target, currentSum);
        System.out.print("paths: "+ret.toString());
        return allPaths;
    }
    private void findPathRecu(ArrayList<ArrayList<Integer>> allPaths, 
    		ArrayList<Integer> onePath, TreeNode root, int target, int currentSum){
    	currentSum = currentSum + root.val;
    	onePath.add(root.val);
    	boolean isLeaf=false;
    	if((root.left == null)&&(root.right==null)) isLeaf = true;
    	if((currentSum == target) && isLeaf){
    		allPaths.add(onePath);
    	}
    	if(root.left != null)
    		findPathRecu(allPaths, onePath, root.left, target, currentSum);
    	if(root.right != null)
    		findPathRecu(allPaths, onePath, root.right, target, currentSum);
    	onePath.remove((Object) root.val);
    }
}
